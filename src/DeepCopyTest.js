"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
describe("DeepCopy", function () {
    it("basic tests", function () {
        const dict = {
            "hello": "world"
        };
        const copy = dict;
        chai_1.assert.deepEqual(dict, copy);
    });
    it("basic integrity", function () {
        const dict = {
            "hello": "world"
        };
        let copy = dict;
        chai_1.assert.deepEqual(copy, {
            "hello": "world"
        });
    });
    it("inner integrity", function () {
        const dict = {
            "hello": "world",
            "inner": {
                "foo": "bar"
            }
        };
        let copy = dict;
        dict['inner']['foo'] = 'bar';
        chai_1.assert.deepEqual(copy, {
            "hello": "world",
            "inner": {
                "foo": "bar"
            }
        });
    });
    it("inner integrity with array", function () {
        const dict = {
            "hello": "world",
            "inner": [
                'bar'
            ]
        };
        let copy = dict;
        dict['inner'][0] = 'bar';
        chai_1.assert.deepEqual(copy, {
            "hello": "world",
            "inner": [
                'bar'
            ]
        });
    });
    it("deep copy of primitives", function () {
        var str = "hello";
        chai_1.assert.equal(5, 5);
        chai_1.assert.equal(str, "hello");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVlcENvcHlUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRGVlcENvcHlUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBRzVCLFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFJakIsRUFBRSxDQUFDLGFBQWEsRUFBRTtRQUVkLE1BQU0sSUFBSSxHQUFRO1lBQ2QsT0FBTyxFQUFFLE9BQU87U0FDbkIsQ0FBQztRQUVGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixhQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVqQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtRQUVsQixNQUFNLElBQUksR0FBUTtZQUNkLE9BQU8sRUFBRSxPQUFPO1NBQ25CLENBQUM7UUFFRixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsYUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUU7WUFDbkIsT0FBTyxFQUFFLE9BQU87U0FDbkIsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUJBQWlCLEVBQUU7UUFFbEIsTUFBTSxJQUFJLEdBQVE7WUFDZCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLEtBQUs7YUFDZjtTQUNKLENBQUM7UUFFRixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUU3QixhQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRTtZQUNuQixPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLEtBQUs7YUFDZjtTQUNKLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0lBR0gsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1FBRTdCLE1BQU0sSUFBSSxHQUFRO1lBQ2QsT0FBTyxFQUFFLE9BQU87WUFDaEIsT0FBTyxFQUFFO2dCQUNMLEtBQUs7YUFDUjtTQUNKLENBQUM7UUFFRixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUV6QixhQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRTtZQUNuQixPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUU7Z0JBQ0wsS0FBSzthQUNSO1NBQ0osQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUU7UUFFMUIsSUFBSSxHQUFHLEdBQVksT0FBTyxDQUFDO1FBQzNCLGFBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25CLGFBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBEZWVwQ29weSB9IGZyb20gJy4vRGVlcENvcHknO1xuXG5kZXNjcmliZShcIkRlZXBDb3B5XCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gVE9ETzogbWFrZSBzdXJlIGFsbCBvZiB0aGUgZm9sbG93aW5nIHRlc3RzIHBhc3Mgd2l0aCB5b3VyIG5ldyBjb2RlLlxuXG4gICAgaXQoXCJiYXNpYyB0ZXN0c1wiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBjb25zdCBkaWN0OiBhbnkgPSB7XG4gICAgICAgICAgICBcImhlbGxvXCI6IFwid29ybGRcIlxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNvcHkgPSBkaWN0O1xuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKGRpY3QsIGNvcHkpO1xuXG4gICAgfSk7XG5cbiAgICBpdChcImJhc2ljIGludGVncml0eVwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBjb25zdCBkaWN0OiBhbnkgPSB7XG4gICAgICAgICAgICBcImhlbGxvXCI6IFwid29ybGRcIlxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjb3B5ID0gZGljdDtcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChjb3B5LCB7XG4gICAgICAgICAgICBcImhlbGxvXCI6IFwid29ybGRcIlxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgaXQoXCJpbm5lciBpbnRlZ3JpdHlcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgY29uc3QgZGljdDogYW55ID0ge1xuICAgICAgICAgICAgXCJoZWxsb1wiOiBcIndvcmxkXCIsXG4gICAgICAgICAgICBcImlubmVyXCI6IHtcbiAgICAgICAgICAgICAgICBcImZvb1wiOiBcImJhclwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGNvcHkgPSBkaWN0O1xuICAgICAgICBkaWN0Wydpbm5lciddWydmb28nXSA9ICdiYXInO1xuXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoY29weSwge1xuICAgICAgICAgICAgXCJoZWxsb1wiOiBcIndvcmxkXCIsXG4gICAgICAgICAgICBcImlubmVyXCI6IHtcbiAgICAgICAgICAgICAgICBcImZvb1wiOiBcImJhclwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuICAgIGl0KFwiaW5uZXIgaW50ZWdyaXR5IHdpdGggYXJyYXlcIiwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgY29uc3QgZGljdDogYW55ID0ge1xuICAgICAgICAgICAgXCJoZWxsb1wiOiBcIndvcmxkXCIsXG4gICAgICAgICAgICBcImlubmVyXCI6IFtcbiAgICAgICAgICAgICAgICAnYmFyJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjb3B5ID0gZGljdDtcbiAgICAgICAgZGljdFsnaW5uZXInXVswXSA9ICdiYXInO1xuXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoY29weSwge1xuICAgICAgICAgICAgXCJoZWxsb1wiOiBcIndvcmxkXCIsXG4gICAgICAgICAgICBcImlubmVyXCI6IFtcbiAgICAgICAgICAgICAgICAnYmFyJ1xuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgaXQoXCJkZWVwIGNvcHkgb2YgcHJpbWl0aXZlc1wiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgc3RyIDogc3RyaW5nID0gXCJoZWxsb1wiO1xuICAgICAgICBhc3NlcnQuZXF1YWwoNSwgNSk7XG4gICAgICAgIGFzc2VydC5lcXVhbChzdHIsIFwiaGVsbG9cIik7XG5cbiAgICB9KTtcblxufSlcbiJdfQ==